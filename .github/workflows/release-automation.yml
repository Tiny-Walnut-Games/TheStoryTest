name: 📦 Release Automation

# Automatically creates releases and updates changelog when version tags are pushed on the release branch
# Three-branch strategy: develop → release (publish & test) → main (production)

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.
    branches:
      - 'release'  # Also trigger on pushes to release branch
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (test without creating release)'
        required: false
        default: true
        type: boolean

jobs:
  # Pre-release validation
  validate-before-release:
    name: 🔍 Pre-Release Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog generation
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: ✅ Run Story Test validation
        run: |
          echo "🧪 Running Story Test validation before release..."
          # Quick validation without Unity build
          python scripts/story_test.py Packages/com.tinywalnutgames.storytest --quick-check || echo "⚠️ Validation warnings detected"
      
      - name: 📋 Validate package.json version
        run: |
          PACKAGE_VERSION=$(jq -r '.version' Packages/com.tinywalnutgames.storytest/package.json)
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          
          if [ "$GITHUB_EVENT_NAME" == "push" ]; then
            echo "📌 Tag version: $TAG_VERSION"
            echo "📦 Package version: $PACKAGE_VERSION"
            
            if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
              echo "❌ Version mismatch! Tag ($TAG_VERSION) != package.json ($PACKAGE_VERSION)"
              exit 1
            fi
            
            echo "✅ Version numbers match"
          else
            echo "ℹ️ Manual dispatch - skipping version check"
          fi

  # Generate changelog and create release
  create-release:
    name: 📝 Create Release
    runs-on: ubuntu-latest
    needs: validate-before-release
    if: success()
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🏷️ Extract version info
        id: version
        run: |
          if [ "$GITHUB_EVENT_NAME" == "push" ]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          else
            VERSION="${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          fi
          
          echo "📌 Release version: $VERSION"
      
      - name: 📜 Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="v$VERSION"
          
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 "$TAG^" 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "ℹ️ No previous tag found - this is the first release"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "📊 Generating changelog from $PREV_TAG to $TAG"
          
          # Generate changelog
          cat > release_notes.md <<EOF
          # Story Test Framework $VERSION
          
          ## 📋 Changes Since $PREV_TAG
          
          EOF
          
          # Get commit messages between tags
          git log "$PREV_TAG..$TAG" --pretty=format:"- %s (%h)" --no-merges >> release_notes.md || \
            git log "$PREV_TAG..HEAD" --pretty=format:"- %s (%h)" --no-merges >> release_notes.md
          
          cat >> release_notes.md <<EOF
          
          
          ## 🎯 Installation
          
          ### Unity Package Manager
          Add this to your \`manifest.json\`:
          \`\`\`json
          {
            "dependencies": {
              "com.tinywalnutgames.storytest": "https://github.com/Tiny-Walnut-Games/TheStoryTest.git#$TAG"
            }
          }
          \`\`\`
          
          ### Manual Installation
          1. Download the \`.unitypackage\` from the assets below
          2. Import into your Unity project via Assets > Import Package > Custom Package
          
          ## 📚 Documentation
          - [README](https://github.com/Tiny-Walnut-Games/TheStoryTest/blob/main/README.md)
          - [CHANGELOG](https://github.com/Tiny-Walnut-Games/TheStoryTest/blob/main/CHANGELOG.md)
          
          ---
          
          *"Every line of code tells a story. Make yours worth reading."* 📖
          EOF
          
          echo "📝 Release notes generated:"
          cat release_notes.md
      
      - name: 🚀 Create GitHub Release (Dry Run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🧪 DRY RUN - Would create release with:"
          echo "Tag: ${{ steps.version.outputs.tag }}"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo ""
          echo "Release notes:"
          cat release_notes.md
      
      - name: 🚀 Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Story Test Framework ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Update CHANGELOG.md
        if: github.event.inputs.dry_run != 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create new changelog entry
          cat > changelog_entry.md <<EOF
          ## [$VERSION] - $DATE
          
          EOF
          
          # Extract changes from release notes (skip header and footer)
          sed -n '/## 📋 Changes/,/## 🎯 Installation/p' release_notes.md | \
            sed '1d;$d' >> changelog_entry.md
          
          # Insert into CHANGELOG.md after the [Unreleased] section
          if [ -f CHANGELOG.md ]; then
            # Find the line number of [Unreleased] section
            LINE=$(grep -n "## \[Unreleased\]" CHANGELOG.md | cut -d: -f1)
            
            if [ -n "$LINE" ]; then
              # Insert after [Unreleased] section
              NEXT_LINE=$((LINE + 1))
              head -n "$NEXT_LINE" CHANGELOG.md > CHANGELOG.tmp
              echo "" >> CHANGELOG.tmp
              cat changelog_entry.md >> CHANGELOG.tmp
              echo "" >> CHANGELOG.tmp
              tail -n +$((NEXT_LINE + 1)) CHANGELOG.md >> CHANGELOG.tmp
              mv CHANGELOG.tmp CHANGELOG.md
            else
              # No [Unreleased] section, prepend to file
              cat changelog_entry.md CHANGELOG.md > CHANGELOG.tmp
              mv CHANGELOG.tmp CHANGELOG.md
            fi
            
            echo "✅ CHANGELOG.md updated"
          else
            echo "⚠️ CHANGELOG.md not found - skipping update"
          fi
      
      - name: 📤 Commit CHANGELOG update
        if: github.event.inputs.dry_run != 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "📝 Update CHANGELOG for v${{ steps.version.outputs.version }}"
          file_pattern: CHANGELOG.md
          commit_author: "Story Test Bot <bot@tinywalnutgames.com>"

  # Release summary
  release-summary:
    name: 📊 Release Summary
    runs-on: ubuntu-latest
    needs: [validate-before-release, create-release]
    if: always()
    
    steps:
      - name: 📋 Report results
        run: |
          echo "📦 Story Test Release Summary"
          echo "============================="
          echo "Validation: ${{ needs.validate-before-release.result }}"
          echo "Release creation: ${{ needs.create-release.result }}"
          
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "🧪 This was a dry run - no release was created"
          elif [ "${{ needs.create-release.result }}" == "success" ]; then
            echo "✅ Release created successfully!"
            echo "🎉 Story Test Framework is ready for the world!"
          else
            echo "❌ Release creation failed"
          fi
          
          echo ""
          echo "🎯 Release workflow completed"
      
      - name: 🔄 Trigger merge-back to main
        if: github.event.inputs.dry_run != 'true' && needs.create-release.result == 'success' && github.ref_type == 'tag'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'merge-back-to-main.yml',
              ref: 'release'
            })