name: Story Test Validation

# Note: Local linter warnings are expected and will resolve when pushed to GitHub
# The linter cannot access GitHub's action registry from your local workspace

on:
  push:
    branches: [ main, develop, 'jmeyer1980/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Fast feedback job - quick static analysis of source files (completes in ~30 seconds)
  quick-validation:
    name: Quick Static Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Quick syntax/static validation without compilation
      - name: Run Story Test Static Analysis (Fast)
        id: story-test-quick
        continue-on-error: true
        run: |
          # Validate C# source files for syntax errors and basic issues
          # This provides quick feedback without waiting for Unity compilation
          echo "Running static analysis on C# source files..."
          
          # Check for common Story Test violations in source code
          find Packages/com.tinywalnutgames.storytest -name "*.cs" -exec grep -l "NotImplementedException" {} \; > violations.txt || true
          find Packages/com.tinywalnutgames.storytest -name "*.cs" -exec grep -l "TODO" {} \; >> violations.txt || true
          
          if [ -s violations.txt ]; then
            echo "⚠️ Found potential violations in source files:"
            cat violations.txt
            echo "Full validation will run on Unity build job"
          else
            echo "✅ Quick scan passed - no obvious violations found"
          fi
          
          # Note: Full IL bytecode analysis happens in Unity build jobs
          echo "Quick validation complete. Awaiting full Unity validation..."
      
      - name: Upload Quick Validation Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: story-test-report-quick
          path: violations.txt
      
      - name: Display Quick Results
        if: always()
        shell: bash
        run: |
          echo "## 🚀 Quick Static Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This is a lightweight pre-check that scans source code for common violations." >> $GITHUB_STEP_SUMMARY
          echo "Full IL bytecode validation runs in the Unity build jobs below." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -s violations.txt ]; then
            echo "⚠️ **Potential issues found in source files:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat violations.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "These files contain patterns that may violate Story Test doctrine." >> $GITHUB_STEP_SUMMARY
            echo "Check Unity build results for definitive validation." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No obvious violations detected in source scan!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Quick dopamine hit delivered!** Awaiting full Unity validation..." >> $GITHUB_STEP_SUMMARY
          fi
      
      # Don't fail on quick validation - it's just a pre-check
  
  story-test:
    name: Story Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            unity-platform: StandaloneLinux64
            unity-version: '2022.3.17f1'
          - os: windows-latest
            unity-platform: StandaloneWindows64
            unity-version: '2022.3.17f1'
          - os: macos-latest
            unity-platform: StandaloneOSX
            unity-version: '2022.3.17f1'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Samples~/ExampleProject/Library
          key: Library-${{ matrix.os }}-${{ matrix.unity-version }}-${{ hashFiles('Samples~/ExampleProject/**') }}
          restore-keys: |
            Library-${{ matrix.os }}-${{ matrix.unity-version }}-
            Library-${{ matrix.os }}-
      
      # Note: Unity secrets (UNITY_LICENSE, UNITY_EMAIL, UNITY_PASSWORD) must be added to repository Settings > Secrets
      # See https://game.ci/docs/github/activation for setup instructions
      # yamllint disable-line rule:line-length
      - name: Build Sample Project (to generate assemblies)
        uses: game-ci/unity-builder@v4
        env:
          # These secrets must be configured in repository settings - warnings are expected until configured
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}  # pragma: allowlist secret
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}  # pragma: allowlist secret
        with:
          projectPath: Samples~/ExampleProject
          unityVersion: ${{ matrix.unity-version }}
          targetPlatform: ${{ matrix.unity-platform }}
          buildName: StoryTestSampleBuild
      
      - name: Run Story Test Validation
        id: story-test
        continue-on-error: true
        run: |
          python scripts/story_test.py Samples~/ExampleProject --verbose --output story-test-report.json --fail-on-violations
        shell: bash
      
      - name: Upload Story Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: story-test-report-${{ matrix.os }}
          path: story-test-report.json
      
      - name: Parse and Display Results
        if: always()
        shell: bash
        run: |
          if [ -f story-test-report.json ]; then
            echo "## Story Test Results - ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
            
            TOTAL=$(jq '.totalViolations' story-test-report.json)
            
            if [ "$TOTAL" -eq 0 ]; then
              echo "✅ **No violations found!** Code narrative is complete." >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Found $TOTAL violation(s)**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Violations by Type" >> $GITHUB_STEP_SUMMARY
              jq -r '.violationsByType | to_entries[] | "- **\(.key)**: \(.value)"' story-test-report.json >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Violation Details" >> $GITHUB_STEP_SUMMARY
              jq -r '.violations[] | "- `\(.type).\(.member)`: \(.violation)"' story-test-report.json >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Story test report not generated" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Fail if violations found
        if: steps.story-test.outcome == 'failure'
        run: |
          echo "Story Test validation failed. Review the violations above."
          exit 1

  # Alternative job for projects without Unity (pure C# libraries)
  story-test-dotnet:
    name: Story Test (C# Only) - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: false  # Enable this if you have a non-Unity C# project
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['7.0']
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      
      - name: Restore Dependencies
        run: dotnet restore
      
      - name: Build Project
        run: dotnet build --configuration Release --no-restore
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Story Test Validation
        run: |
          python story_test.py ./bin/Release --verbose --output story-test-report.json --fail-on-violations
      
      - name: Upload Story Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: story-test-report-dotnet-${{ matrix.os }}
          path: story-test-report.json
